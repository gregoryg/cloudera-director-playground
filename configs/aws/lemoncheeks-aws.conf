# Cluster name
name: lemoncheeks

#
provider {
    type: aws
    #
    # Get AWS credentials from the OS environment
    # See http://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html
    #
    # If specifying the access keys directly and not through variables, make sure to enclose
    # them in double quotes.
    #
    # Not needed when running on an instance launched with an IAM role.

    accessKeyId: ${?AWS_ACCESS_KEY_ID}
    secretAccessKey: ${?AWS_SECRET_ACCESS_KEY}

    #
    # ID of the Amazon AWS region to use
    # See: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html
    #

    region: us-west-2

    #
    # Region endpoint (if you are using one of the Gov. regions)
    #

    # regionEndpoint: ec2.us-gov-west-1.amazonaws.com

    # keyName refers to a key for the AWS user in the region
    keyName: gregoryg-oregon

    #
    # ID of the VPC subnet
    # See: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html
    #

    subnetId: subnet-eb5eae8f

    #
    # Comma separated list of security group IDs
    # See: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html
    #
    # Default security group

    securityGroupsIds: sg-ce014ba8

    #
    # A prefix that Cloudera Director should use when naming the instances (this is not part of the hostname)
    #

    instanceNamePrefix: greg

    #
    # Specify a size for the root volume (in GBs). Cloudera Director will automatically expand the
    # filesystem so that you can use all the available disk space for your application
    # See: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/storage_expand_partition.html
    #

    rootVolumeSizeGB: 200 # defaults to 50 GB if not specified

    #
    # Specify the type of the EBS volume used for the root partition. Defaults to gp2
    # See: http://aws.amazon.com/ebs/details/
    #

    rootVolumeType: gp2 # 

    #
    # Whether to associate a public IP address with instances or not. If this is false
    # we expect instances to be able to access the internet using a NAT instance
    #
    # Currently the only way to get optimal S3 data transfer performance is to assign
    # public IP addresses to your instances and not use NAT instances (public subnet setup)
    #
    # See: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-ip-addressing.html
    #

    associatePublicIpAddresses: true

}

#
# SSH credentials to use to connect to the instances
#

ssh {
    # username: ec2-user # for RHEL image
    username: centos
    privateKey: .ssh/gregoryg-oregon.pem # absolute path to .pem file
}

#
# A list of instance types to use for group of nodes or management services
#

instances {

  m42x {
    type: m4.2xlarge   # requires an HVM AMI
    image: ami-e1f70e81

    #
    # Name of the IAM Role to use for this instance type
    # http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html
    #
    # iamProfileName: iam-profile-REPLACE-ME
    tags {
      owner: gregoryg
    }
    bootstrapScript: """#!/bin/sh
# This is an embedded bootstrap script that runs as root and can be used to customize
# the instances immediately after boot and before any other Cloudera Director action

# If the exit code is not zero Cloudera Director will automatically retry

echo 'Hello World!'
yum-config-manager --disable scl
exit 0
"""
    #
    # Flag indicating whether to normalize the instance. Not setting normalization here implies that your
    # bootstrap script will take care of normalization. This is an advanced configuration that will require
    # assistance from Cloudera support.
    #
    # Normalization includes:
    #   downloading and installing packages
    #   minimizing swappiness
    #   increasing the maximun number of open files
    #   mounting ephemeral disks
    #   resizing the root partition.
    #
    # Defaults to true
    #

    normalizeInstance: true

  }

  m42x-disks {
    type: m4.2xlarge   # requires an HVM AMI
    image: ami-75a66715
    tags { owner: gregoryg }
    normalizeInstance: true
    bootstrapScript: """#!/bin/sh
yum-config-manager --disable scl
exit 0
"""
  }
  m44x {
    type: m4.4xlarge
    image: ami-HVM-REPLACE-ME

    tags {
      owner: gregoryg
    }
  }

  c34x {
    type: c3.4xlarge
    image: ami-HVM-REPLACE-ME

    tags {
      owner: gregoryg
      # owner: ${?USER}
    }
  }

  c38x {
    type: c3.8xlarge
    image: ami-HVM-REPLACE-ME

    tags {
      owner: gregoryg
    }
  }

  c44x {
    type: c4.4xlarge
    image: ami-HVM-REPLACE-ME

    tags {
      owner: gregoryg
    }
  }

  i2x {
    type: i2.xlarge
    image: ami-HVM-REPLACE-ME

    tags {
      owner: gregoryg
    }
  }

  i22x {
    type: i2.2xlarge
    image: ami-HVM-REPLACE-ME

    tags {
      owner: gregoryg
    }
  }

  d2x {
    type: d2.xlarge
    image: ami-HVM-REPLACE-ME

    tags {
      owner: gregoryg
    }
  }

  d22x {
    type: d2.2xlarge
    image: ami-HVM-REPLACE-ME

    tags {
      owner: gregoryg
    }
  }

  d24x {
    type: d2.4xlarge
    image: ami-HVM-REPLACE-ME

    tags {
      owner: gregoryg
    }
  }

  t2l {   # only suitable as a gateway
    type: t2.large
    image: ami-HVM-REPLACE-ME

    tags {
      owner: gregoryg
    }
  }
}

#
# Optional external database server configuration.
#
# Cloudera Director can create databases on existing database servers or
# provision RDS database servers on-demand.
#
databaseServers {
  mysqlmeta {
    type: mysql
    host: <HOSTNAME> # with IP address of database server
    port: 3306
    user: cmdbadmin
    password: cmdbadmin
  }
}

#
# Configuration for Cloudera Manager. Cloudera Director can use an existing Cloudera Manager
# or bootstrap everything from scratch for a new cluster
#
cloudera-manager {
    repository: "http://archive.cloudera.com/cm5/redhat/7/x86_64/cm/5.8/"
    repositoryKeyUrl: "http://archive.cloudera.com/cm5/redhat/7/x86_64/cm/RPM-GPG-KEY-cloudera"

    configs {
        CLOUDERA_MANAGER {
            enable_api_debug: true
            custom_banner_html: "Don't Panic!"
        }
    }
    instance: ${instances.m42x} {
              instanceNamePrefix: cm
              tags {
            # add any additional tags as needed
            application: "Cloudera Manager 5"
        }
    }
    enableEnterpriseTrial: true

    #
    # Install unlimited strength JCE policy files along with Cloudera Manager
    #
    unlimitedJce: true
  databaseTemplates {
    CLOUDERA_MANAGER {
      name: cmtemplate
      databaseServerName: mysqlmeta # Must correspond to an external database server named above
      databaseNamePrefix: scm
      usernamePrefix: cmadmin
    }

    ACTIVITYMONITOR {
      name: cmtemplate
      databaseServerName: mysqlmeta # Must correspond to an external database server named above
      databaseNamePrefix: amon
      usernamePrefix: cmadmin
    }

    REPORTSMANAGER {
      name: cmtemplate
      databaseServerName: mysqlmeta # Must correspond to an external database server named above
      databaseNamePrefix: rptman
      usernamePrefix: cmadmin
    }
    NAVIGATOR {
      name: cmtemplate
      databaseServerName: mysqlmeta # Must correspond to an external database server named above
      databaseNamePrefix: nav
      usernamePrefix: cmadmin
    }

    # Added in Cloudera Manager 5.2+
    NAVIGATORMETASERVER {
      name: cmtemplate
      databaseServerName: mysqlmeta # Must correspond to an external database server named above
      databaseNamePrefix: navmeta
      usernamePrefix: cmadmin
    }
}
}


#
# Cluster description
#
cluster {
    # parcelRepositories: ["http://archive.cloudera.com/cdh5/parcels/5.8/"]
    parcelRepositories: ["http://archive.cloudera.com/cdh5/parcels/5.8/","http://archive.cloudera.com/kafka/parcels/latest/","http://archive.cloudera.com/beta/kudu/parcels/latest/","http://archive.cloudera.com/beta/impala-kudu/parcels/latest/","http://archive.cloudera.com/beta/recordservice/parcels/latest/"]
    products {
      CDH: 5.8
      KAFKA: 2
      KUDU: 0.10
    }

    services: [HDFS, YARN, ZOOKEEPER, HIVE, HUE, OOZIE, HBASE, IMPALA, KAFKA, SPARK_ON_YARN, SOLR]
    #
    # Optional custom service configurations
    # Configuration keys containing special characters (e.g., '.', ':') must be enclosed in double quotes.

  databaseTemplates: {
    HIVE {
      name: hivetemplate
      databaseServerName: mysqlmeta # Must correspond to an external database server named above
      databaseNamePrefix: hivemeta
      usernamePrefix: hive
    },
    # SENTRY {
    #   name: sentrytemplate
    #   databaseServerName: mysqlmeta # Must correspond to an external database server named above
    #   databaseNamePrefix: sentry
    #   usernamePrefix: sentry
    # },
    OOZIE {
      name: oozietemplate
      databaseServerName: mysqlmeta # Must correspond to an external database server named above
      databaseNamePrefix: oozie
      usernamePrefix: oozie
    },
    SQOOP {
      name: sqooptemplate
      databaseServerName: mysqlmeta # Must correspond to an external database server named above
      databaseNamePrefix: sqoop
      usernamePrefix: sqoop
    }
  }

    gateways {
      count: 1
      instance: ${instances.m42x} {
        instanceNamePrefix: gw
        tags {
          group: gateway
        }
      }
      roles {
        HIVE: [GATEWAY]
        SPARK_ON_YARN: [GATEWAY]
        SOLR: [GATEWAY]
        # SENTRY: [GATEWAY]
      }
    }

masters {
      count: 1
      # instance: ${instances.i22x} {
      instance: ${instances.m42x} {
        instanceNamePrefix: master
        placementGroup: praseed-pg
        tags {
          group: master
        }
      }

      roles {
        HDFS: [NAMENODE, SECONDARYNAMENODE]
        YARN: [RESOURCEMANAGER, JOBHISTORY]
        ZOOKEEPER: [SERVER]
        HBASE: [MASTER, HBASETHRIFTSERVER]
        HIVE: [HIVESERVER2, HIVEMETASTORE]
        IMPALA: [STATESTORE,CATALOGSERVER]
        HUE: [HUE_SERVER]
        SPARK_ON_YARN: [SPARK_YARN_HISTORY_SERVER, GATEWAY]
        KAFKA: [KAFKA_BROKER]
        OOZIE: [OOZIE_SERVER]
        # SENTRY: [SENTRY_SERVER]
        SOLR: [SOLR_SERVER]
      }
      # Optional custom role configurations
      # Configuration keys containing special characters (e.g., '.', ':') must be enclosed in double quotes.
      #
      configs {
      #   HDFS {
      #      NAMENODE {
      #        dfs_name_dir_list: /data/nn
      #        namenode_port: 1234
      #      }
      #   }
        KAFKA {
           KAFKA_BROKER {
             broker_max_heap_size: 512
             # "log.dirs": /data0/kafka/data
          }
        }
      }
    }

    workers {
      count: 2
      minCount: 2
      instance: ${instances.m42x-disks} {
      instanceNamePrefix: work
      placementGroup: praseed-pg
        tags {
          group: worker
        }
      }
      roles {
        HDFS: [DATANODE]
        YARN: [NODEMANAGER]
        IMPALA: [IMPALAD]
        SPARK_ON_YARN: [GATEWAY]
        HBASE: [REGIONSERVER]
      }
    }

    zoo-workers {
                count: 2
                minCount: 2
                instance: ${instances.m42x-disks} {
                         instanceNamePrefix: zwork
                         placementGroup: praseed-pg
                         tags {
                              group: worker
                         }
                }
      roles {
        HDFS: [DATANODE]
        YARN: [NODEMANAGER]
        HBASE: [REGIONSERVER]
        IMPALA: [IMPALAD]
        ZOOKEEPER: [SERVER]
        SPARK_ON_YARN: [GATEWAY]
      }
                
    }
    task-runner {
        count: 0
        instanceNamePrefix: task
        instance: ${instances.4core-no-data-master} {
            tags { group: taskrunner }
        }
    }


    postCreateScripts: ["""#!/bin/sh

# This is an embedded post creation script that runs as root and can be used to
# customize the cluster after it has been created.

# If the exit code is not zero Cloudera Director will fail

# Post creation scripts also have access to the following environment variables:

#    DEPLOYMENT_HOST_PORT
#    ENVIRONMENT_NAME
#    DEPLOYMENT_NAME
#    CLUSTER_NAME
#    CM_USERNAME
#    CM_PASSWORD

echo 'Hello World!'
exit 0
    """,
    """#!/usr/bin/python

# Additionally, multiple post-creation scripts can be supplied.  They will run
# in the order they are listed here.  Interpeters other than bash can be used
# as well.

print 'Hello again!'
    """]

    # For more complex scripts, post creation scripts can be supplied via path,
    # where they will be read from the local filesystem.  They will run after
    # any scripts supplied in the previous postCreateScripts section.
    # postCreateScriptsPaths: ["/tmp/test-script.sh",
    #                         "/tmp/test-script.py"]

    preTerminateScripts: ["""#!/bin/sh

# This is an embedded pre-termination script that runs as root and can be used to
# customize the cluster after it has been created.

# If the exit code is not zero Cloudera Director will fail

# Pre terminate scripts also have access to the following environment variables:

#    DEPLOYMENT_HOST_PORT
#    ENVIRONMENT_NAME
#    DEPLOYMENT_NAME
#    CLUSTER_NAME
#    CM_USERNAME
#    CM_PASSWORD

echo 'Goodbye World!'
exit 0
    """,
    """#!/usr/bin/python

# Additionally, multiple pre terminate scripts can be supplied.  They will run
# in the order they are listed here.  Interpeters other than bash can be used
# as well.

print 'Goodbye again!'
        """]

    # For more complex scripts, pre terminate scripts can be supplied via path,
    # where they will be read from the local filesystem.  They will run after
    # any scripts supplied in the previous preTerminateScripts section.
    # preTerminateScriptsPaths: ["/tmp/test-script.sh",
    #                            "/tmp/test-script.py"]
}
