
#
# Copyright (c) 2015 Cloudera, Inc. All rights reserved.
#

#
# Sample AWS Cloudera Director configuration file based on the Cloudera AWS reference architecture:
# http://www.cloudera.com/content/cloudera/en/resources/library/whitepaper/cloudera-enterprise-reference-architecture-for-aws-deployments.html
#

#
# Cluster name
#

name: C5-Reference-AWS

#
# Cloud provider configuration (credentials, region or zone and optional default image)
#

provider {
    type: aws

    #
    # Get AWS credentials from the OS environment
    # See http://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html
    #
    # If specifying the access keys directly and not through variables, make sure to enclose
    # them in double quotes.
    #
    # Not needed when running on an instance launched with an IAM role.

    # accessKeyId: ${?AWS_ACCESS_KEY_ID}
    # secretAccessKey: ${?AWS_SECRET_ACCESS_KEY}

    #
    # ID of the Amazon AWS region to use
    # See: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html
    #

    region: region-REPLACE-ME

    #
    # Region endpoint (if you are using one of the Gov. regions)
    #

    # regionEndpoint: ec2.us-gov-west-1.amazonaws.com

    #
    # ID of the VPC subnet
    # See: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html
    #

    subnetId: subnet-REPLACE-ME

    #
    # Comma separated list of security group IDs
    # See: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html
    #
    # Default security group

    securityGroupsIds: sg-REPLACE-ME

    #
    # A prefix that Cloudera Director should use when naming the instances (this is not part of the hostname)
    #

    instanceNamePrefix: cloudera-director

    #
    # Specify a size for the root volume (in GBs). Cloudera Director will automatically expand the
    # filesystem so that you can use all the available disk space for your application
    # See: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/storage_expand_partition.html
    #

    # rootVolumeSizeGB: 100 # defaults to 50 GB if not specified

    #
    # Specify the type of the EBS volume used for the root partition. Defaults to gp2
    # See: http://aws.amazon.com/ebs/details/
    #

    # rootVolumeType: gp2 # OR standard (for EBS magnetic)

    #
    # Whether to associate a public IP address with instances or not. If this is false
    # we expect instances to be able to access the internet using a NAT instance
    #
    # Currently the only way to get optimal S3 data transfer performance is to assign
    # public IP addresses to your instances and not use NAT instances (public subnet setup)
    #
    # See: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-ip-addressing.html
    #

    # associatePublicIpAddresses: true

}

#
# SSH credentials to use to connect to the instances
#

ssh {
    username: ec2-user # for RHEL image
    privateKey: REPLACE-ME # with an absolute path to .pem file
}

#
# A list of instance types to use for group of nodes or management services
#

instances {

  m42x {
    type: m4.2xlarge   # requires an HVM AMI

    #
    # Amazon Machine Image (AMI)
    #
    # See: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html
    # Compatibility matrix: https://aws.amazon.com/amazon-linux-ami/instance-type-matrix/
    #
    # Red Hat Enterprise Linux AMI IDs: http://aws.amazon.com/partners/redhat/
    # We support Red Hat Enterprise Linux 6.4 (64bit) 64bit PV or HVM
    #

    image: ami-HVM-REPLACE-ME

    #
    # Name of the IAM Role to use for this instance type
    # http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html
    #

    # iamProfileName: iam-profile-REPLACE-ME

    tags {
      owner: ${?USER}
    }

    bootstrapScript: """#!/bin/sh

# This is an embedded bootstrap script that runs as root and can be used to customize
# the instances immediately after boot and before any other Cloudera Director action

# If the exit code is not zero Cloudera Director will automatically retry

echo 'Hello World!'
exit 0

"""

    #
    # Flag indicating whether to normalize the instance. Not setting normalization here implies that your
    # bootstrap script will take care of normalization. This is an advanced configuration that will require
    # assistance from Cloudera support.
    #
    # Normalization includes:
    #   downloading and installing packages
    #   minimizing swappiness
    #   increasing the maximun number of open files
    #   mounting ephemeral disks
    #   resizing the root partition.
    #
    # Defaults to true
    #

    # normalizeInstance: true

  }

  m44x {
    type: m4.4xlarge
    image: ami-HVM-REPLACE-ME

    tags {
      owner: ${?USER}
    }
  }

  c34x {
    type: c3.4xlarge
    image: ami-HVM-REPLACE-ME

    tags {
      owner: ${?USER}
    }
  }

  c38x {
    type: c3.8xlarge
    image: ami-HVM-REPLACE-ME

    tags {
      owner: ${?USER}
    }
  }

  c44x {
    type: c4.4xlarge
    image: ami-HVM-REPLACE-ME

    tags {
      owner: ${?USER}
    }
  }

  i2x {
    type: i2.xlarge
    image: ami-HVM-REPLACE-ME

    tags {
      owner: ${?USER}
    }
  }

  i22x {
    type: i2.2xlarge
    image: ami-HVM-REPLACE-ME

    tags {
      owner: ${?USER}
    }
  }

  d2x {
    type: d2.xlarge
    image: ami-HVM-REPLACE-ME

    tags {
      owner: ${?USER}
    }
  }

  d22x {
    type: d2.2xlarge
    image: ami-HVM-REPLACE-ME

    tags {
      owner: ${?USER}
    }
  }

  d24x {
    type: d2.4xlarge
    image: ami-HVM-REPLACE-ME

    tags {
      owner: ${?USER}
    }
  }

  t2l {   # only suitable as a gateway
    type: t2.large
    image: ami-HVM-REPLACE-ME

    tags {
      owner: ${?USER}
    }
  }
}

#
# Optional external database server configuration.
#
# Cloudera Director can create databases on existing database servers or
# provision RDS database servers on-demand.
#
# databaseServers {
#
#    rdsmysqlprod1 {
#      type: mysql
#      user: root
#      password: rootpassword
#      instanceClass: db.m3.medium
#      dbSubnetGroupName: REPLACE-ME
#      vpcSecurityGroupIds: sg-REPLACE-ME
#      allocatedStorage: 10
#      engineVersion: 5.5.40b
#      tags {
#        owner: ${?USER}
#      }
#    }
#
#    existingmysql1 {
#        type: mysql
#        host: REPLACE-ME # with IP address of database server
#        port: 3306
#        user: root
#        password: rootpassword
#    }
#
#    existingpostgres1 {
#        type: postgresql
#        host: REPLACE-ME # with IP address of database server
#        port: 5432
#        user: postgres
#        password: rootpassword
#    }
#
# }

#
# Configuration for Cloudera Manager. Cloudera Director can use an existing Cloudera Manager
# or bootstrap everything from scratch for a new cluster
#

cloudera-manager {

    instance: ${instances.m42x} {
        tags {
            # add any additional tags as needed
            application: "Cloudera Manager 5"
        }
    }

    #
    # Licensing configuration
    #
    # There are three mutually exclusive options for setting up Cloudera Manager's license.
    # 1. License text may be embedded in this file using the "license" field. Triple quotes (""")
    #    are recommended for including multi-line text strings.
    # 2. The "licensePath" can be used to specify the path to a file containing the license.
    # 3. The "enableEnterpriseTrial" flag indicates whether the 60-Day Cloudera Enterprise Trial
    #    should be activated when no license is present. This must not be set to true if a
    #    license is included using either "license" or "licensePath".

    #
    # Embed a license for Cloudera Manager
    #

    # license: """
    #   -----BEGIN PGP SIGNED MESSAGE-----
    #   Hash: SHA1
    #
    # {
    #   "version"        : 1,
    #   "name"           : "License Owner",
    #   "uuid"           : "license id",
    #   "expirationDate" : 0,
    #   "features"       : [ "FEATURE1", "FEATURE2" ]
    # }
    # -----BEGIN PGP SIGNATURE-----
    # Version: GnuPG v1.4.11 (GNU/Linux)
    #
    # PGP SIGNATURE
    # -----END PGP SIGNATURE-----
    # """

    #
    # Include a license for Cloudera Manager from an external file
    #

    # licensePath: "/path/to/license.txt.asc"

    #
    # Activate 60-Day Cloudera Enterprise Trial
    #

    enableEnterpriseTrial: true

    #
    # Install unlimited strength JCE policy files along with Cloudera Manager
    #

    # unlimitedJce: true

    #
    # Optional database configuration
    #
    # There are three mutually exclusive options for database usage in Cloudera Director.
    # 1. With no configuration, an embedded PostgreSQL database will be used.
    # 2. Alternatively, existing external databases can be used.
    # 3. Finally, databases can be created on the fly on existing external database servers.

    #
    # Optional configuration for existing external databases
    #
    # databases {
    #     CLOUDERA_MANAGER {
    #         type: postgresql
    #
    #         host: db.example.com
    #         port: 123
    #
    #         user: admin
    #         password: 1231ed
    #
    #         name: scm
    #     }
    #
    #     ACTIVITYMONITOR { ... }
    #
    #     REPORTSMANAGER { ... }
    #
    #     NAVIGATOR { ... }
    #
    #     # Added in Cloudera Manager 5.2+
    #     NAVIGATORMETASERVER { ... }
    # }

    #
    # Optional configuration for creating external databases on the fly
    #
    # When a database is created on the fly, Director generates a random database name using the specified database
    # name prefix, a random username based on the specified username prefix, and a random password. The password is
    # stored by Director and made available to the service that uses the database. If multiple services reference the
    # same external database server, Director will create a database for each.
    #
    # MySQL limits usernames to sixteen characters. Therefore, limit usernamePrefix values for databases on MySQL to
    # seven characters; the remaining nine characters are used by the randomized suffix generated by Director.
    #

    # databaseTemplates {
    #     CLOUDERA_MANAGER {
    #         name: cmtemplate
    #         databaseServerName: mysql1 # Must correspond to an external database server named above
    #         databaseNamePrefix: scm
    #         usernamePrefix: cmadmin
    #     }
    #
    #     ACTIVITYMONITOR { ... }
    #
    #     REPORTSMANAGER { ... }
    #
    #     NAVIGATOR { ... }
    #
    #     # Added in Cloudera Manager 5.2+
    #     NAVIGATORMETASERVER { ... }
    # }

    #
    # Configuration to override Cloudera Manager package repositories
    #

    # repository: "http://archive.cloudera.com/cm5/redhat/6/x86_64/cm/5.5/"
    # repositoryKeyUrl: "http://archive.cloudera.com/cm5/redhat/6/x86_64/cm/RPM-GPG-KEY-cloudera"

    # OR use an exist Cloudera Manager installation

    # hostname: "192.168.33.10"
    # username: <if not default 'admin'>
    # password: <if not default 'admin'>

    #
    # Optional configuration for Cloudera Manager and its management services
    #
    # Configuration properties for CLOUDERA_MANAGER are documented at
    # http://www.cloudera.com/content/cloudera/en/documentation/core/latest/topics/cm_props_cmserver.html
    #
    # Configuration properties for the Cloudera Management services are documented at
    # http://www.cloudera.com/content/cloudera/en/documentation/core/latest/topics/cm_props_mgmtservice.html
    #
    # Configuration properties for Hosts are documented at
    # http://www.cloudera.com/content/cloudera/en/documentation/core/latest/topics/cm_props_host.html
    #

    # configs {
    #     # CLOUDERA_MANAGER corresponds to the Cloudera Manager Server configuration options
    #     CLOUDERA_MANAGER {
    #         enable_api_debug: false
    #         custom_banner_html: "Managed by Cloudera Director"
    #     }
    #
    #     # CLOUDERA_MANAGEMENT_SERVICE corresponds to the Service-Wide configuration options
    #     CLOUDERA_MANAGEMENT_SERVICE {
    #         enable_alerts : false
    #         enable_config_alerts : false
    #     }
    #
    #     SERVICEMONITOR { ... }
    #
    #     ACTIVITYMONITOR { ... }
    #
    #     HOSTMONITOR { ... }
    #
    #     REPORTSMANAGER { ... }
    #
    #     EVENTSERVER { ... }
    #
    #     ALERTPUBLISHER { ... }
    #
    #     NAVIGATOR { ... }
    #
    #     # Added in Cloudera Manager 5.2+
    #     NAVIGATORMETASERVER { ... }
    #
    #     # Configuration properties for all hosts
    #     HOSTS { ... }
    # }

}

#
# Cluster description
#

cluster {

    # List the products and their versions that need to be installed.
    # These products must have a corresponding parcel in the parcelRepositories
    # configured above. The specified version will be used to find a suitable
    # parcel. Specifying a version that points to more than one parcel among
    # those available will result in a configuration error. Specify more granular
    # versions to avoid conflicts.

    products {
      CDH: 5
    }

    #
    # Optional override of CDH parcel repositories
    #

    # parcelRepositories: ["http://archive.cloudera.com/cdh5/parcels/5.5/"]

    # NOTE: Sentry is only supported in Cloudera Manager versions 5.1 onward.
    services: [HDFS, YARN, ZOOKEEPER, HBASE, HIVE, HUE, OOZIE, SENTRY, SPARK_ON_YARN, KAFKA]

    #
    # Optional custom service configurations
    # Configuration keys containing special characters (e.g., '.', ':') must be enclosed in double quotes.
    #
    # configs {
    #     HDFS {
    #       dfs_block_size: 134217728
    #     }
    #
    #     MAPREDUCE {
    #       mapred_system_dir: /user/home
    #       mr_user_to_impersonate: mapred1
    #     }
    #
    #     KAFKA {
    #       "num.partitions": 3
    #     }
    # }

    #
    # Optional configuration for existing external database for Hive Metastore or Sentry databases
    #

    # databases {
    #     HIVE {
    #         type: postgresql
    #         host: db.example.com
    #         port: 123
    #         user: hive
    #         password: pass
    #         name: hive_db
    #     },
    #     SENTRY {
    #         type: postgresql
    #         host: db.example.com
    #         port: 123
    #         user: sentry
    #         password: pass
    #         name: sentry_db
    #     },
    # }

    #
    # Optional configuration for creating external database on the fly for Hive Metastore or Sentry
    # database
    #

    # databaseTemplates: {
    #     HIVE {
    #         name: hivetemplate
    #         databaseServerName: mysql1 # Must correspond to an external database server named above
    #         databaseNamePrefix: hivemetastore
    #         usernamePrefix: hive
    #     },
    #     SENTRY {
    #         name: sentrytemplate
    #         databaseServerName: mysql1
    #         databaseNamePrefix: sentrydb
    #         usernamePrefix: sentry
    #     },
    # }

    masters {
      count: 1

      instance: ${instances.i22x} {
        tags {
          group: master
        }
      }

      roles {
        HDFS: [NAMENODE, SECONDARYNAMENODE]
        YARN: [RESOURCEMANAGER, JOBHISTORY]
        ZOOKEEPER: [SERVER]
        HBASE: [MASTER]
        HIVE: [HIVESERVER2, HIVEMETASTORE]
        HUE: [HUE_SERVER]
        OOZIE: [OOZIE_SERVER]
        SENTRY: [SENTRY_SERVER]
        SPARK_ON_YARN: [SPARK_YARN_HISTORY_SERVER]
        KAFKA: [KAFKA_BROKER]
      }

      # Optional custom role configurations
      # Configuration keys containing special characters (e.g., '.', ':') must be enclosed in double quotes.
      #
      # configs {
      #   HDFS {
      #      NAMENODE {
      #        dfs_name_dir_list: /data/nn
      #        namenode_port: 1234
      #      }
      #   }
      #   KAFKA {
      #      KAFKA_BROKER {
      #        broker_max_heap_size: 512
      #        "log.dirs": /data0/kafka/data
      #     }
      #   }
      # }
    }

    workers {
      count: 9
      #
      # Minimum number of instances required to set up the cluster.
      # Fail and quit if minCount number of instances is not available in this cloud
      # environment. Else, continue setting up the cluster.
      #
      minCount: 5

      instance: ${instances.d22x} {

        # Put all cluster nodes in a placement group for improved network performance
        # Note: this only works for a limited set of instances
        # http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html

        # placementGroup: REPLACE-ME

        tags {
          group: worker
        }
      }

      roles {
        HDFS: [DATANODE]
        YARN: [NODEMANAGER]
        HBASE: [REGIONSERVER]
      }

      # Optional custom role configurations
      # Configuration keys containing periods must be enclosed in double quotes.
      # configs {
      #   HDFS {
      #     DATANODE {
      #        dfs_data_dir_list: /data/dn
      #      }
      #   }
      #   HBASE {
      #     REGIONSERVER {
      #       hbase_regionserver_java_heapsize: 4000000000
      #     }
      #   }
      # }
    }

    gateways {
      count: 1

      instance: ${instances.t2l} {
        tags {
          group: gateway
        }
      }

      roles {
        HIVE: [GATEWAY]
        SPARK_ON_YARN: [GATEWAY]
      }

      # Optional custom role configurations
      # Configuration keys containing periods must be enclosed in double quotes.
      # configs {
      #   HIVE {
      #     GATEWAY {
      #       hive_metastore_timeout: 3000
      #       client_config_root_dir: /etc/hive
      #     }
      #   }
      # }
    }

    postCreateScripts: ["""#!/bin/sh

# This is an embedded post creation script that runs as root and can be used to
# customize the cluster after it has been created.

# If the exit code is not zero Cloudera Director will fail

# Post creation scripts also have access to the following environment variables:

#    DEPLOYMENT_HOST_PORT
#    ENVIRONMENT_NAME
#    DEPLOYMENT_NAME
#    CLUSTER_NAME
#    CM_USERNAME
#    CM_PASSWORD

echo 'Hello World!'
exit 0
    """,
    """#!/usr/bin/python

# Additionally, multiple post-creation scripts can be supplied.  They will run
# in the order they are listed here.  Interpeters other than bash can be used
# as well.

print 'Hello again!'
    """]

    # For more complex scripts, post creation scripts can be supplied via path,
    # where they will be read from the local filesystem.  They will run after
    # any scripts supplied in the previous postCreateScripts section.
    # postCreateScriptsPaths: ["/tmp/test-script.sh",
    #                         "/tmp/test-script.py"]

    preTerminateScripts: ["""#!/bin/sh

# This is an embedded pre-termination script that runs as root and can be used to
# customize the cluster after it has been created.

# If the exit code is not zero Cloudera Director will fail

# Pre terminate scripts also have access to the following environment variables:

#    DEPLOYMENT_HOST_PORT
#    ENVIRONMENT_NAME
#    DEPLOYMENT_NAME
#    CLUSTER_NAME
#    CM_USERNAME
#    CM_PASSWORD

echo 'Goodbye World!'
exit 0
    """,
    """#!/usr/bin/python

# Additionally, multiple pre terminate scripts can be supplied.  They will run
# in the order they are listed here.  Interpeters other than bash can be used
# as well.

print 'Goodbye again!'
        """]

    # For more complex scripts, pre terminate scripts can be supplied via path,
    # where they will be read from the local filesystem.  They will run after
    # any scripts supplied in the previous preTerminateScripts section.
    # preTerminateScriptsPaths: ["/tmp/test-script.sh",
    #                            "/tmp/test-script.py"]
}
