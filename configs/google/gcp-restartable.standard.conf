# Cluster name
environmentName: "c-137"
deploymentName: "teenyverse"
name: "zeep" # zanflorp

#
# Cloud provider configuration
provider {
  type: google
  #
  # The Project ID
  # See: https://cloud.google.com/storage/docs/projects#projectid
  #
  projectId: gcp-se
  #
  # The JSON key for the service account that Director should use
  # See: https://cloud.google.com/storage/docs/authentication#service_accounts
  #
  jsonKey: """
{
  "type": "service_account",
  "project_id": "gcp-se",
  "private_key_id": "7fa4b95be656ac8faef6c54b00031292c800f724",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCh8WvjVY7zYoEn\nqacbu2JKsuUBHBE7RkzADEIZG11hUwDNxOB6VvMvarO941wWVRNgYPHMtIfdu4TH\nGhn6l+3o6B9ddlSbb7oWW+RA7OG6VqvYpWI9A4/7htg42Pwx56avrSE7BOC6x2+n\nLA5IL7KIVWMZEeXzQ6C+G77cERK1dMIqgEtG/Joe1cGhSVb11+SP9KeinUkoLjYc\nbg/Za90jeyPUOWkKMc5JHbIsWQrjP+dLZMpA8EcSpcBGC/jdE0AuhHUotMj+rwcV\nWn+uC3OuEKiYeBv8qYmKa3jprKR/TSSCFAsE3NL4L2Blmjni6+vM8kussg7lOtLQ\ni80tHtbjAgMBAAECggEASIEsiqXd0L5DkRx2AwaMZWFfAnYsiNtatYlHdrI3xsFA\n1N/WmS+gxZQCUXwf2KfSew4sdDhHtFCmi/X1t6qaC/MRR+kYzFbje+s8cI0eKy1u\n1xqEt0iHCFhBKoKLt1Q93t2mySPP8hAkvzYMVul0B3IjYjAPQjD/IN6PPzwtoiuk\nAL5s61vc3xuWyE/QzMtrU9NHDMcZ64XqPsq+nHpVTAHx1G8kSHtftLBeyAX8O0He\nTJqZ5R9ccxCjKsr5/0ltG8v6w9IM1QdvP3yYotyEFLTJzDZVkq2ZwuhuU7fcOOsa\n7IryzSrikQaUXuZnXk3lF8vgRSyTxdUTkB2dhgSpkQKBgQDPWt+dmZfTig/9mQMO\nabCy4UXCZ2IOXIv5ftYm6F4izZacpybrRN5Qd6KQE2X9UtSFAKcTREY+kpE88elS\nN42+9FgSw3j3iIA/DrLv+l3ALOjDSsPDFiJK16WDEqEwJjXHaVJGiKKxvNsez5co\nHz12tZdzVM6cuMU3ji8SeD3plQKBgQDH7z4BS/MOV45Y8j+JyREniI0NrbcqpjlD\nZbHB92oW5syN0it9cUr5e0fETbWuZtqpnvYf00fd3iPrNbhFyF96p9VTDyYSETxW\nTN9LKld+NBMFl/fKgTCACrdugFHUEY38aadEgqsrVfJnwJlkv1xGqT2iXPnuFAXZ\nMbSJrU3QlwKBgFuaMZ9V8xSosVe++PKtDjp3+nFfapodmFioB8M4dB275QVfcnoM\n+olh0JcFetDmfqwjFawVRVLvPOpHlGOV1zC8kQv4/r+btcwlmjcZy8DSFiHwLXtJ\nk+ysR5oX6M10k918UbSHOBh87fA2lPhMlMKUhkuU85GYrsdUMMdgBznhAoGAH6OR\neV0Oeo+KfDLhsSk7aLkoMSjzWnFxkGPQbHR9umANsMe4kCJUjgRfSAZQIOgv5DW+\nlyy1K7wSjQ80OP7LdTqH/JviF2vY04NYtqldrSAKfpEc6lPlW+3WN0thJ6Ebif0i\nNipDchkowhhtbc8GiDwR/9acynsqrcM64aqmLMMCgYEAoGqJSqQB6MCntAQKNFId\n53SLylNC+GVF/aQhcoLXu6BvbsMB4lOGml8CQYb74OSKEHFP82IHg6Km+C5OyR1K\n0FQ8rGpGb4KU7V+JdjsdRdhAAe9f+uX2+wbRDSKtaXFz1Mcn9ilKKb8G7R2q5pFW\n1qt3iuYPxoZ+tbrXQbUCc0A=\n-----END PRIVATE KEY-----\n",
  "client_email": "935008526857-compute@developer.gserviceaccount.com",
  "client_id": "108443447170787104385",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://accounts.google.com/o/oauth2/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/935008526857-compute%40developer.gserviceaccount.com"
}
                       """
  #
  # ID of the GCP region to use (must be available within the project)
  # See: https://cloud.google.com/compute/docs/zones
  region: us-central1
}

#
# SSH credentials to use to connect to the instances
#
ssh {
  username: gregj
  privateKey: /home/gregj/.ssh/google_compute_engine # with an absolute path to the SSH key you want to use
}

#
# A list of instance types to use for group of nodes or management services
#
instances {
  4core-no-data-cm {
    # No data disks, used for CM instance
    instanceNamePrefix: ggcm
    # image: centos6
    image: "https://www.googleapis.com/compute/v1/projects/centos-cloud/global/images/centos-7-v20161027"
    # image: "https://www.googleapis.com/compute/v1/projects/gcp-se/global/images/cm59-prebaked"
    networkName: locked-down
    # The type of machine to use for this instance (c.f. https://cloud.google.com/compute/docs/machine-types)
    type: n1-highmem-4
    # The zone ID  (c.f. https://cloud.google.com/compute/docs/zones)
    #
    zone: us-central1-c
    bootDiskType: Standard
    bootDiskSizeGb: 60
    dataDiskCount: 0
    tags {
      owner: gregoryg
    }
    bootstrapScript: """#!/bin/sh
yum -y install centos-release-scl wget
tee /tmp/csd-install.sh << EOF
#!/bin/bash
cd /tmp

until [ -d "/opt/cloudera/csd" ] ; do
      sleep 60
done

wget 'http://archive.cloudera.com/beta/spark2/csd/SPARK2_ON_YARN-2.0.0.cloudera.beta2.jar' 
wget 'http://archive.cloudera.com/beta/kudu/csd/KUDU-1.1.0.jar'

sudo mv -v SPARK2_ON_YARN-2.0.0.cloudera.beta2.jar /opt/cloudera/csd/
sudo mv -v KUDU-1.1.0.jar /opt/cloudera/csd/

EOF
chmod a+rx /tmp/csd-install.sh
/tmp/csd-install.sh &
exit 0
"""
  }
  4core-no-data-gateway {
    # No data disks, used for gateway instances
    instanceNamePrefix: gggateway
    # image: centos6
    image: "https://www.googleapis.com/compute/v1/projects/centos-cloud/global/images/centos-7-v20161027"
    # image: "https://www.googleapis.com/compute/v1/projects/gcp-se/global/images/cm59-prebaked"
    networkName: locked-down
    # The type of machine to use for this instance (c.f. https://cloud.google.com/compute/docs/machine-types)
    type: n1-highmem-4
    # The zone ID  (c.f. https://cloud.google.com/compute/docs/zones)
    #
    zone: us-central1-c
    bootDiskType: Standard
    bootDiskSizeGb: 60
    dataDiskCount: 0
    tags {
      owner: gregoryg
    }
    bootstrapScript: """#!/bin/sh
yum -y install centos-release-scl
exit 0
"""
  }
  4core-no-data-master {
    # No data disks, used for master instances
    instanceNamePrefix: ggmaster
    # image: centos6
    image: "https://www.googleapis.com/compute/v1/projects/centos-cloud/global/images/centos-7-v20161027"
    # image: "https://www.googleapis.com/compute/v1/projects/gcp-se/global/images/cm59-prebaked"
    networkName: locked-down
    # The type of machine to use for this instance (c.f. https://cloud.google.com/compute/docs/machine-types)
    type: n1-highmem-4
    zone: us-central1-c
    bootDiskType: Standard
    bootDiskSizeGb: 60
    dataDiskCount: 0
    tags {
      owner: gregoryg
    }
    bootstrapScript: """#!/bin/sh
yum -y install centos-release-scl
exit 0
"""
  }
  4core-2-1tb-data {
    # 2 data disks, used for worker instances
    instanceNamePrefix: ggworker
    # image: centos6
    image: "https://www.googleapis.com/compute/v1/projects/centos-cloud/global/images/centos-7-v20161027"
    # image: "https://www.googleapis.com/compute/v1/projects/gcp-se/global/images/cm59-prebaked"
    networkName: locked-down
    type: n1-highmem-4
    zone: us-central1-c
    bootDiskType: Standard
    bootDiskSizeGb: 60
    dataDiskCount: 2
    dataDiskType: Standard
    dataDiskSizeGb: 1000
    tags {
      owner: gregoryg
    }
    bootstrapScript: """#!/bin/sh
yum -y install centos-release-scl
exit 0
"""
  }
}

#
# Optional external database server configuration.
#
# Cloudera Director can create databases on existing database servers or
# provision RDS database servers on-demand.
#
databaseServers {
  mysqlmeta {
    type: mysql
    host: ${?HOSTNAME}
    port: 3306
    user: cmdbadmin
    password: cmdbadmin
  }
}

#
# Configuration for Cloudera Manager. Cloudera Director can use an existing Cloudera Manager
# or bootstrap everything from scratch for a new cluster
#
cloudera-manager {
  repository: "http://archive.cloudera.com/cm5/redhat/7/x86_64/cm/5.9/"
  repositoryKeyUrl: "http://archive.cloudera.com/cm5/redhat/7/x86_64/cm/RPM-GPG-KEY-cloudera"

  configs {
    CLOUDERA_MANAGER {
      enable_api_debug: true
      custom_banner_html: "Peace among worlds!"
      # "\"What is my purpose?\" \"You pass butter\""/n33dful-g00dz/lucius
      # "Keep Summer Safe"/teenyverse/zeep
      # "
      enable_faster_bootstrap: true
      enable_fast_dir_create: true
      #
      # Kerberos Configurations
      #

      #
      # # The type of KDC Cloudera Manager will be using. Valid values are "MIT KDC"
      # # and "Active Directory"
      KDC_TYPE: "MIT KDC"
      #
      # # The KDC host name or IP address.
      KDC_HOST: "gg-kdc.c.gcp-se.internal"
      #
      # # The security realm that your KDC uses. This will be of the format of a fully
      # # qualified domain name:
      # #    YOUR.KDC.REALM
      SECURITY_REALM: "GREGORYG.COM"
      #
      # # The Active Directory KDC domain. Only applicable to Active Directory KDCs. This
      # # will be in the format of an X.500 Directory Specification:
      # #    DC=domain,DC=example,DC=com
      # AD_KDC_DOMAIN: "REPLACE-ME"
      #
      # # Allow Cloudera Manager to deploy Kerberos configurations to hosts. At the moment,
      # # Director only supports setting this to true.
      KRB_MANAGE_KRB5_CONF: true
      #
      # # The encryption types your KDC supports. Some of those listed below will require the
      # # unlimited strength JCE policy files.
      KRB_ENC_TYPES: "aes256-cts arcfour-hmac des3-hmac-sha1 des-cbc-md5 des-cbc-crc"
      #
      # # There are many more optional Kerberos configuration options available to Cloudera Manager.
      # # Please refer to the Kerberos section on
      # # http://www.cloudera.com/documentation/enterprise/properties/5-7-x/topics/cm_props_cmserver.html
      # # for more details.
      #
    }

  }
  instance: ${instances.4core-no-data-cm} {
    tags {
      application: "Cloudera Manager 5"
    }
  }
  enableEnterpriseTrial: true

  # Install unlimited strength JCE policy files?
  unlimitedJce: true

  #
  # Kerberos Credentials
  #

  # #
  # # An administrative Kerberos account capable of creating principals on the KDC that
  # # Cloudera Manager will be using. This will typically be in the format:
  # #    Principal@YOUR.KDC.REALM
  krbAdminUsername: "cloudera-scm@GREGORYG.COM"
  #
  # # The password for the administrative Kerberos account.
  krbAdminPassword: "zlort0"
  #


  databaseTemplates {
    CLOUDERA_MANAGER {
      name: cmtemplate
      databaseServerName: mysqlmeta # Must correspond to an external database server named above
      databaseNamePrefix: scm
      usernamePrefix: cmadmin
    }

    ACTIVITYMONITOR {
      name: cmtemplate
      databaseServerName: mysqlmeta # Must correspond to an external database server named above
      databaseNamePrefix: amon
      usernamePrefix: cmadmin
    }

    REPORTSMANAGER {
      name: cmtemplate
      databaseServerName: mysqlmeta # Must correspond to an external database server named above
      databaseNamePrefix: rptman
      usernamePrefix: cmadmin
    }


    NAVIGATOR {
      name: cmtemplate
      databaseServerName: mysqlmeta # Must correspond to an external database server named above
      databaseNamePrefix: nav
      usernamePrefix: cmadmin
    }

    # Added in Cloudera Manager 5.2+
    NAVIGATORMETASERVER {
      name: cmtemplate
      databaseServerName: mysqlmeta # Must correspond to an external database server named above
      databaseNamePrefix: navmeta
      usernamePrefix: cmadmin
    }
  }
}

#
# Cluster description
#
cluster {
  # Optional override of CDH parcel repositories
  parcelRepositories: [
 "http://archive.cloudera.com/cdh5/parcels/5.9/",
 "http://archive.cloudera.com/kafka/parcels/latest/",
 "http://archive.cloudera.com/beta/kudu/parcels/latest/",
 "http://archive.cloudera.com/beta/impala-kudu/parcels/latest/",
 "http://archive.cloudera.com/beta/recordservice/parcels/latest/",
 "http://archive.cloudera.com/beta/spark2/parcels/latest/",
 "http://archive.cloudera.com/accumulo-c5/parcels/latest"
 ]
  products {
    CDH: 5.9.0
    # KAFKA: 2
    KUDU: 1.1.0
    SPARK2: 2
  }

  services: [HDFS, YARN, ZOOKEEPER, HBASE, HIVE, HUE, OOZIE, SPARK_ON_YARN, IMPALA, SOLR, FLUME, SQOOP, KS_INDEXER, SENTRY]

  ## NOTE: to get all role types for CM, use the API:
  ##     curl -u 'admin:admin'  http://10.240.0.3:7180/api/v5/clusters/lemoncheeks/services  ## to get the name of the service
  ##     curl -u 'admin:admin'  http://10.240.0.3:7180/api/v5/clusters/lemoncheeks/services/CD-IMPALA-CWufpYcy/roleTypes


  # S3 Configurations
  configs {
    HDFS {
      core_site_safety_valve: """
            <property>
                <name>fs.s3a.access.key</name>
                <value>"""${AWS_ACCESS_KEY_ID}"""</value>
            </property>
            <property>
                <name>fs.s3a.secret.key</name>
                <value>"""${AWS_SECRET_ACCESS_KEY}"""</value>
            </property>
        """
    }
  }

  databaseTemplates: {
    HIVE {
      name: hivetemplate
      databaseServerName: mysqlmeta # Must correspond to an external database server named above
      databaseNamePrefix: hivemeta
      usernamePrefix: hive
    },
    SENTRY {
      name: sentrytemplate
      databaseServerName: mysqlmeta # Must correspond to an external database server named above
      databaseNamePrefix: sentry
      usernamePrefix: sentry
    },
    HUE {
      name: huetemplate
      databaseServerName: mysqlmeta # Must correspond to an external database server named above
      databaseNamePrefix: hue
      usernamePrefix: hue
    },
    OOZIE {
      name: oozietemplate
      databaseServerName: mysqlmeta # Must correspond to an external database server named above
      databaseNamePrefix: oozie
      usernamePrefix: oozie
    },
    SQOOP {
      name: sqooptemplate
      databaseServerName: mysqlmeta # Must correspond to an external database server named above
      databaseNamePrefix: sqoop
      usernamePrefix: sqoop
    },
    HBASE {
      name: hbasetemplate
      databaseServerName: mysqlmeta # Must correspond to an external database server named above
      databaseNamePrefix: hbase
      usernamePrefix: hbase
    }
  }

  gateways {
    count: 1
    instance: ${instances.4core-no-data-gateway} {
      instanceNamePrefix: gggw
      tags {
        group: gateway
      }
    }
    roles {
      FLUME: [AGENT]
      HBASE: [GATEWAY]
      HDFS: [GATEWAY]
      HIVE: [GATEWAY]
      # KAFKA: [GATEWAY]
      SOLR: [GATEWAY]
      SPARK_ON_YARN: [GATEWAY]
      YARN: [GATEWAY]
      # ACCUMULO: [GATEWAY]
      # SENTRY: [GATEWAY]
    }
  }

  masters {
    count: 1
    instance: ${instances.4core-no-data-master} {
      type: n1-highmem-8
      instanceNamePrefix: ggmaster
      tags {
        group: master
      }

    }
    roles {
      HDFS: [NAMENODE, SECONDARYNAMENODE, BALANCER]
      YARN: [RESOURCEMANAGER, JOBHISTORY]
      ZOOKEEPER: [SERVER]
      HBASE: [MASTER, HBASETHRIFTSERVER]
      HIVE: [HIVESERVER2, HIVEMETASTORE, WEBHCAT]
      IMPALA: [STATESTORE, CATALOGSERVER]
      HUE: [HUE_SERVER]
      SPARK_ON_YARN: [SPARK_YARN_HISTORY_SERVER, GATEWAY]
      # KAFKA: [KAFKA_BROKER]
      KS_INDEXER: [HBASE_INDEXER]
      OOZIE: [OOZIE_SERVER]
      SENTRY: [SENTRY_SERVER]
      SOLR: [SOLR_SERVER]
      SQOOP: [SQOOP_SERVER]
    }
    # Optional custom role configurations
    # Configuration keys containing special characters (e.g., '.', ':') must be enclosed in double quotes.
    #
    configs {
      HDFS {
        NAMENODE {
          namenode_java_heapsize: 4294967296
          # dfs_name_dir_list: /data/nn
          # namenode_port: 1234
        }
        SECONDARYNAMENODE {
          secondary_namenode_java_heapsize: 4294967296
        }
      }
      # KAFKA {
      #    KAFKA_BROKER {
      #      broker_max_heap_size: 512
      #      # "log.dirs": /data0/kafka/data
      #   }
      # }
    }
  }

  workers {
    count: 2
    minCount: 1
    instance: ${instances.4core-2-1tb-data} {
      dataDiskCount: 4
      dataDiskType: Standard
      dataDiskSizeGb: 500
      instanceNamePrefix: ggwork
      tags {
        group: worker
      }
    }
    roles {
      HDFS: [DATANODE]
      YARN: [NODEMANAGER]
      IMPALA: [IMPALAD]
      SPARK_ON_YARN: [GATEWAY]
      HBASE: [REGIONSERVER]
      FLUME: [AGENT]
    }
  }

  zoo-workers {
    count: 2
    minCount: 2
    instance: ${instances.4core-2-1tb-data} {
      dataDiskCount: 4
      dataDiskType: Standard
      dataDiskSizeGb: 500
      instanceNamePrefix: ggzwork
      tags {group: worker}
    }
    roles {
      HDFS: [DATANODE]
      YARN: [NODEMANAGER]
      IMPALA: [IMPALAD]
      ZOOKEEPER: [SERVER]
      SPARK_ON_YARN: [GATEWAY]
      HBASE: [REGIONSERVER]
      FLUME: [AGENT]
    }
  }

  task-runner {
    count: 0
    instanceNamePrefix: ggtask
    instance: ${instances.4core-no-data-master} {
      tags {group: taskrunner}
    }
  }

  ## one can use a combination of postCreateScripts and postCreateScriptPaths ; scripts are run on one random host
  postCreateScripts: ["""#!/bin/sh

# This is an embedded post creation script that runs as root and can be used to
# customize the cluster after it has been created.

# If the exit code is not zero Cloudera Director will fail

# Post creation scripts also have access to the following environment variables:

#    DEPLOYMENT_HOST_PORT
#    ENVIRONMENT_NAME
#    DEPLOYMENT_NAME
#    CLUSTER_NAME
#    CM_USERNAME
#    CM_PASSWORD

echo 'Hello World!'
exit 0
    """,
    """#!/bin/sh

# Additionally, multiple post creation scripts can be supplied.  They will run in the
# order they are listed here.

echo 'Hello again!'
exit 0
    """]

  # For more complex scripts, post creation scripts can be supplied via path,
  # where they will be read from the local filesystem.  They will run after
  # any scripts supplied in the previous postCreateScripts section.
  # postCreateScriptsPaths: ["/tmp/test-script.sh",
  #                         "/tmp/test-script.py"]

  preTerminateScripts: ["""#!/bin/sh

# This is an embedded pre-termination script that runs as root and can be used to
# customize the cluster after it has been created.

# If the exit code is not zero Cloudera Director will fail

# Pre terminate scripts also have access to the following environment variables:

#    DEPLOYMENT_HOST_PORT
#    ENVIRONMENT_NAME
#    DEPLOYMENT_NAME
#    CLUSTER_NAME
#    CM_USERNAME
#    CM_PASSWORD

echo 'Goodbye World!'
exit 0
    """,
    """#!/usr/bin/python

# Additionally, multiple pre terminate scripts can be supplied.  They will run
# in the order they are listed here.  Interpeters other than bash can be used
# as well.

print 'Goodbye again!'
        """]

  # For more complex scripts, pre terminate scripts can be supplied via path,
  # where they will be read from the local filesystem.  They will run after
  # any scripts supplied in the previous preTerminateScripts section.
  # preTerminateScriptsPaths: ["/tmp/test-script.sh",
  #                            "/tmp/test-script.py"]
}
